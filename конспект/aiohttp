aiohttp.ClientSession() - Это сердце и основная точка входа для всех клиентских операций/запросов. Перед выполнением HTTP-запросов необходимо создать сессию.
Сессия содержит хранилище cookies и пул соединений и параметры для конфигурации запросов, благодаря чему cookies и соединения разделяются между HTTP-запросами,
отправленными одной и той же сессией.

async def main():
    # Создание сессии
    session = aiohttp.ClientSession()

    # Отправка GET-запроса
    async with session.get('https://www.example.com') as response:

session.get(url, allow_redirects=True, **kwargs) - Выполняет HTTP-запрос методом GET.
    http://example.com/page?param1=value1&param2=value2.
    http://example.com/page - это базовый URL, который указывает на ресурс на сервере.
    ? - символ, который отделяет основной URL от параметров запроса.
    param1=value1 - первый параметр с именем param1 и значением value1.
    & - символ, который разделяет параметры между собой.
    param2=value2 - второй параметр с именем param2 и значением value2.

session.post(url, data=None, **kwargs) - Выполняет HTTP-запрос методом POST.
session.options(url, allow_redirects=True, **kwargs)  - Выполняет HTTP-запрос методом OPTIONS.
session.head(url, allow_redirects=False, **kwargs) - Выполняет HTTP-запрос методом HEAD.
session.put(url, data=None, **kwargs)  - Выполняет PUT-запрос.
session.patch(url, data=None,**kwargs) - Метод для отправки PATCH-запроса с помощью сессии.
session.delete(url, **kwargs) - Метод для отправки DELETE-запроса с использованием сессии.


При создании aiohttp.ClientSession() автоматически создается коннектор - объект класса TCPConnector. Коннектор в контексте HTTP-сессий — это компонент, который управляет
соединениями с серверами. Он отвечает за установку, поддержание и закрытие сетевых соединений между клиентом и сервером. В aiohttp коннекторы используются для асинхронного
взаимодействия с веб-серверами. Правильная конфигурация коннектора может существенно повлиять на производительность и надежность приложения.

session.connector - Возвращает экземпляр коннектора, который в настоящее время используется в сессии. Это может быть полезно для диагностики или для дополнительной настройки коннектора.
session.detach() - Метод отсоединяет коннектор от текущей сессии, не закрывая его. После выполнения этого метода, сессия переходит в закрытое состояние, но коннектор остается доступным для дальнейшего использования.
session.connector_owner - Атрибут показывает, следует ли закрывать коннектор, когда сессия закрывается.

netrc – это текстовый файл, который хранит логины и пароли для аутентификации на различных серверах. 