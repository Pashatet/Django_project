class Sphere:
    def __init__(self, radius, mass):
        self.radius, self.mass = radius, mass
        self.area = __import__('math').pi*4*radius**2
        self.volume = self.area/3*radius
        self.density = mass/self.volume
    _get = lambda x: lambda self, decimal=5: round(getattr(self, x), decimal)
    get_surface_area = _get('area')
    get_density = _get('density')
    get_radius = _get('radius')
    get_volume = _get('volume')
    get_mass = _get('mass')


def validate_pin(pin):
    return len(pin) in [4] and pin.isdigit()
print(validate_pin("1234")) --> True

def people_with_age_drink(age):
    text = 'drink whisky'
    match age:
        case age if age in range(14):
            text = 'drink toddy'
        case age if age in range(18):
            text = 'drink coke'
        case age if age in range(21):
            text = 'drink beer'
    return text

def people_with_age_drink(age):
    return ["drink toddy", "drink coke", "drink beer", "drink whisky"][(age >= 21) + (age > 17) + (age > 13)]

class DictMixin:
""" то есть два метода, которые отвечают за представление объекта в строковом виде, это __str__ и __repr__.
Разница между ними в том, что __str__ не срабатывает, если объект находится внутри другого объекта, в таких случаях
вызывается __repr__. Поэтому, если там надо изменить то, как объект будет представляется внутри другого объекта, нам
нужно переопределять именно метод __repr__. Ну а про то, что при отсутствии метода __str__ вызывается метод __repr__
вы наверняка и так знаете. Используя это, я сделал так, что в строковом представлении объект отображается как словарь
атрибутов, а классы вложенные в этот словарь в свою очередь так же представляются как аналогичные словари(объект внутри
другого объекта). Ну а функция eval все это преобразовывает из строкового вида в тип объекта."""
    def __repr__(self):
        return str(self.__dict__)

    def to_dict(self):
        return eval(self.__repr__())


бинарный поиск
def binary_search(list, item):
  # в low и high хранятся границы части списка, где выполняется поиск
  low = 0
  high = len(list) - 1
  i = 0
  # Пока не останется один элемент
  while low <= high:
    # Проверяем средний элемент
    mid = (low + high) // 2
    guess = list[mid]
    # Значение найдено
    if guess == item:
      return mid
    # Значение велико
    if guess > item:
      high = mid - 1
    # Значение мало
    else:
      low = mid + 1
    i=i+1
    print(i)

  # Значение не найдено
  return None

my_list = [1, 3, 5, 7, 9]
print(binary_search(my_list, 3)) # => 1 (позиция элемента в списке)

# 'None' в Python означает "ничто". Элемент не найден.
print(binary_search(my_list, -1)) # => None